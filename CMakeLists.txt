cmake_minimum_required(VERSION 3.5)
project(handlebars C)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" "${CMAKE_MODULE_PATH}")

set(HANDLEBARS_VERSION_MAJOR 0)
set(HANDLEBARS_VERSION_MINOR 6)
set(HANDLEBARS_VERSION_PATCH 4)

add_definitions(-DHANDLEBARS_VERSION_MAJOR=${HANDLEBARS_VERSION_MAJOR})
add_definitions(-DHANDLEBARS_VERSION_MINOR=${HANDLEBARS_VERSION_MINOR})
add_definitions(-DHANDLEBARS_VERSION_PATCH=${HANDLEBARS_VERSION_PATCH})
add_definitions(-DHANDLEBARS_VERSION_STRING="${HANDLEBARS_VERSION_MAJOR}.${HANDLEBARS_VERSION_MINOR}.${HANDLEBARS_VERSION_PATCH}")
add_definitions(-DHANDLEBARS_SPEC_VERSION_STRING="4.0.5")
add_definitions(-DMUSTACHE_SPEC_VERSION_STRING="1.1.3")

if(WIN32)
    add_definitions(-DYY_NO_UNISTD_H=1)
    add_definitions(-DYAML_DECLARE_STATIC=1 -DPCRE_STATIC=1)
ENDIF(WIN32)

option(HANDLEBARS_ENABLE_TESTS
        "Enable the compilation and running of unit tests" ON)

IF(WIN32)
    find_library(LIBCOMPAT
        NAME compat
        HINTS ${CMAKE_SOURCE_DIR}/deps ENV LIBCOMPAT_PATH)
ENDIF(WIN32)

find_package(Check REQUIRED)
include_directories(${CHECK_INCLUDE_DIRS})
set(LIBS ${LIBS} ${CHECK_LIBRARIES})

find_package(Libjsonc REQUIRED)
include_directories(${LIBJSONC_INCLUDE_DIR})
set(LIBS ${LIBS} ${LIBJSONC_LIBRARY})

find_package(PCRE REQUIRED)
include_directories(${PCRE_INCLUDE_DIRS})
set(LIBS ${LIBS} ${PCRE_LIBRARIES})

find_package(Talloc REQUIRED)
include_directories(${TALLOC_INCLUDE_DIRS})
set(LIBS ${LIBS} ${TALLOC_LIBRARIES})

find_package(Threads)
set(LIBS ${LIBS} ${CMAKE_THREAD_LIBS_INIT})
if(CMAKE_USE_PTHREADS_INIT)
    add_definitions(-DHAVE_PTHREAD)
endif()

find_package(LibYaml REQUIRED)
include_directories(${LIBYAML_INCLUDE_DIRS})
set(LIBS ${LIBS} ${LIBYAML_LIBRARIES})

# generate handlebars_config.h
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/handlebars_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/src/mustache_config.h)

add_subdirectory(src)
add_subdirectory(bin)

# Unit tests
if (HANDLEBARS_ENABLE_TESTS)
    set(ENV{handlebars_export_dir} "${CMAKE_SOURCE_DIR}/spec/handlebars/export")
    set(ENV{handlebars_spec_dir} "${CMAKE_SOURCE_DIR}/spec/handlebars/spec")
    set(ENV{handlebars_tokenizer_spec} "${CMAKE_SOURCE_DIR}/spec/handlebars/spec/tokenizer.json")
    set(ENV{handlebars_parser_spec} "${CMAKE_SOURCE_DIR}/spec/handlebars/spec/parser.json")
    set(ENV{mustache_spec_dir} "${CMAKE_SOURCE_DIR}/spec/mustache/specs")
    add_subdirectory(tests)
    enable_testing()
    add_test(NAME test_ast COMMAND tests/test_ast)
    add_test(NAME test_ast_helpers COMMAND tests/test_ast_helpers)
    add_test(NAME test_ast_list COMMAND tests/test_ast_list)
    add_test(NAME test_cache COMMAND tests/test_cache)
    add_test(NAME test_compiler COMMAND tests/test_compiler)
    add_test(NAME test_main COMMAND tests/test_main)
    add_test(NAME test_map COMMAND tests/test_map)
    add_test(NAME test_opcode_printer COMMAND tests/test_opcode_printer)
    add_test(NAME test_opcodes COMMAND tests/test_opcodes)
    add_test(NAME test_scanners COMMAND tests/test_scanners)
    add_test(NAME test_spec_handlebars COMMAND tests/test_spec_handlebars $ENV{handlebars_spec_dir})
    add_test(NAME test_spec_handlebars_compiler COMMAND tests/test_spec_handlebars_compiler $ENV{handlebars_export_dir})
    add_test(NAME test_spec_handlebars_parser COMMAND tests/test_spec_handlebars_parser $ENV{handlebars_parser_spec})
    add_test(NAME test_spec_handlebars_tokenizer COMMAND tests/test_spec_handlebars_tokenizer $ENV{handlebars_tokenizer_spec})
    add_test(NAME test_spec_mustache COMMAND tests/test_spec_mustache $ENV{mustache_spec_dir})
    add_test(NAME test_string COMMAND tests/test_string)
    add_test(NAME test_token COMMAND tests/test_token)
    add_test(NAME test_utils COMMAND tests/test_utils)
    add_test(NAME test_value COMMAND tests/test_value)
endif()
